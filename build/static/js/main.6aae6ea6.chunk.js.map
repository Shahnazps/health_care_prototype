{"version":3,"sources":["App.js","components/filter.js","components/medicine_list.js","components/medicines.js","components/medicine.js","serviceWorker.js","index.js"],"names":["App","class","to","Filter","className","style","marginTop","Component","MedicineList","data","this","props","console","log","newdata","map","key","id","src","image","alt","name","description","medicine_list_content","Medicines","Medicine","match","params","medObj","filter","item","cost","safety_instructions","Boolean","window","location","hostname","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"knEAUeA,MALf,WAEE,OAAQ,yBAAKC,MAAM,aAAY,yBAAKA,MAAM,OAAM,kBAAC,IAAD,CAAMC,GAAG,eAAT,wB,2CCN7BC,G,uLAEb,OAAQ,yBAAKC,UAAU,SAASC,MAAO,CAAEC,UAAW,QAAS,wBAAIF,UAAU,kBAAd,WAA2C,6BAAM,qCAAe,6BAAM,wCAAkB,6BAAM,qCAAe,6BAAM,qCAAe,kC,GAFnKG,cCEfC,E,iLAEjB,IAAIC,EAAOC,KAAKC,MAAMF,KACtBG,QAAQC,IAAIJ,GACZ,IAAMK,EAAUL,EAAKM,KAAI,SAAAN,GACvB,OACE,wBAAIO,IAAKP,EAAKQ,GAAIb,UAAU,YAC1B,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBACEA,UAAU,iBACVc,IAAKT,EAAKU,MACVC,IAAKX,EAAKY,QAGd,yBAAKjB,UAAU,aACb,uBAAGA,UAAU,iBAAiBK,EAAKY,MACnC,uBAAGjB,UAAU,wBACVK,EAAKa,YADR,OAEE,kBAAC,IAAD,CAAMpB,GAAI,cAAgBO,EAAKQ,IAA/B,wBAONM,EACJ,6BACE,wBAAInB,UAAU,qBAAd,aACA,wBAAIA,UAAU,kBAAkBU,IAGpC,OACE,yBAAKV,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YAAYmB,GAC3B,yBAAKnB,UAAU,YACb,kBAAC,EAAD,a,GArC8BG,aCErBiB,E,iLAEN,OAAQ,kBAAC,EAAD,CAAcf,KAAMA,Q,GAFJF,aCDlBkB,E,iLAEb,IACIR,EADUP,KAAKC,MAAMe,MACVC,OAAOV,GAChBW,EAASnB,EAAKoB,QAAO,SAAAC,GAAI,OAAIA,EAAKb,KAAOA,KAAI,GACnD,OAAQ,yBAAKb,UAAU,aAAY,yBAAKA,UAAU,OAAM,yBAAKA,UAAU,YAAW,yBAAKA,UAAU,iBAAiBc,IAAKU,EAAOT,MAAOC,IAAKQ,EAAOP,QAC7I,yBAAKjB,UAAU,aAAY,uBAAGA,UAAU,iBAAiBwB,EAAOP,MAC5D,uBAAGjB,UAAU,wBAAwBwB,EAAON,aAAgB,2BAAG,oCAAH,cAA8BM,EAAOG,MAAS,uBAAG3B,UAAU,gCAA+B,oDAA6BwB,EAAOI,4B,GAPpKzB,aCQlB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASV,MACvB,2DCVN,IAAMW,EACF,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxC,IACjC,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,cAAcC,UAAWhB,IAC3C,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,iBAAiBC,UAAWf,MAK1DgB,IAASC,OAAOL,EAASM,SAASC,eAAe,SDiH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.6aae6ea6.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n//import MedicineList from './components/medicine_list'\nfunction App() {\n\n  return (<div class=\"container\"><div class=\"row\"><Link to=\"/medicines/\">Jump to medicines</Link></div></div>)\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nexport default class Filter extends Component {\n    render() {\n        return (<div className=\"filter\" style={{ marginTop: \"10%\" }}><h4 className=\"filter_heading\">Filters</h4><hr /><div>Uses</div><hr /><div>Company</div><hr /><div>Salt</div><hr /><div>Cost</div><hr /></div>)\n    }\n}","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Filter from \"./filter\";\nexport default class MedicineList extends Component {\n  render() {\n    let data = this.props.data;\n    console.log(data);\n    const newdata = data.map(data => {\n      return (\n        <li key={data.id} className=\"medicine\">\n          <div className=\"row\">\n            <div className=\"col-lg-2\">\n              <img\n                className=\"medicine_image\"\n                src={data.image}\n                alt={data.name}\n              />\n            </div>\n            <div className=\"col-lg-10\">\n              <p className=\"medicine_name\">{data.name}</p>\n              <p className=\"medicine_description\">\n                {data.description}&nbsp;\n                <Link to={\"/medicines/\" + data.id}>See more &raquo;</Link>\n              </p>\n            </div>\n          </div>\n        </li>\n      );\n    });\n    const medicine_list_content = (\n      <div>\n        <h2 className=\"medicines_heading\">Medicines</h2>\n        <ul className=\"medicines_list\">{newdata}</ul>\n      </div>\n    );\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-lg-9\">{medicine_list_content}</div>\n          <div className=\"col-lg-3\">\n            <Filter />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport data from './data/medicines.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './medicines.css';\nimport MedicineList from './medicine_list'\nexport default class Medicines extends Component {\n\n    render() { return (<MedicineList data={data} />) }\n}\n","import React, { Component } from \"react\";\nimport data from './data/medicines.json';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import './medicine.css';\nexport default class Medicine extends Component {\n    render() {\n        const match = this.props.match;\n        let id = match.params.id;\n        const medObj = data.filter(item => item.id === id)[0];\n        return (<div className=\"container\"><div className=\"row\"><div className=\"col-lg-2\"><img className=\"medicine_image\" src={medObj.image} alt={medObj.name} /></div>\n            <div className=\"col-lg-10\"><p className=\"medicine_name\">{medObj.name}</p>\n                <p className=\"medicine_description\">{medObj.description}</p><p><b>Cost:</b>&nbsp;&#8377; {medObj.cost}</p><p className=\"medicine_safety_instructions\"><b>Safety Instructions: </b>{medObj.safety_instructions}</p>\n            </div>\n        </div></div >)\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport Medicines from './components/medicines';\nimport Medicine from './components/medicine';\nimport * as serviceWorker from './serviceWorker';\nconst routing = (\n    <Router>\n        <div>\n            <Route exact path=\"/\" component={App} />\n            <Route exact path=\"/medicines/\" component={Medicines} />\n            <Route exact path=\"/medicines/:id\" component={Medicine} />\n\n        </div>\n    </Router>\n)\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}